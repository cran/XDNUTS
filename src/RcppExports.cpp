// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// set_parameters
Rcpp::List set_parameters(const unsigned int N_init1, const unsigned int N_adapt, const unsigned int N_init2, const double burn_adapt_ratio, const bool keep_warm_up, const bool recycle_only_init, const unsigned int max_treedepth, const unsigned int max_treedepth_init, const double eps_jitter, const unsigned int L_jitter, const double gamma, const double kappa, const Rcpp::Nullable<Rcpp::NumericVector> delta, const unsigned int t0, const std::string M_type, const double refresh, const double l_eps_init, const bool different_stepsize, const double mu, const Rcpp::RObject M_cont, const Rcpp::RObject M_disc);
RcppExport SEXP _XDNUTS_set_parameters(SEXP N_init1SEXP, SEXP N_adaptSEXP, SEXP N_init2SEXP, SEXP burn_adapt_ratioSEXP, SEXP keep_warm_upSEXP, SEXP recycle_only_initSEXP, SEXP max_treedepthSEXP, SEXP max_treedepth_initSEXP, SEXP eps_jitterSEXP, SEXP L_jitterSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP deltaSEXP, SEXP t0SEXP, SEXP M_typeSEXP, SEXP refreshSEXP, SEXP l_eps_initSEXP, SEXP different_stepsizeSEXP, SEXP muSEXP, SEXP M_contSEXP, SEXP M_discSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N_init1(N_init1SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_adapt(N_adaptSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_init2(N_init2SEXP);
    Rcpp::traits::input_parameter< const double >::type burn_adapt_ratio(burn_adapt_ratioSEXP);
    Rcpp::traits::input_parameter< const bool >::type keep_warm_up(keep_warm_upSEXP);
    Rcpp::traits::input_parameter< const bool >::type recycle_only_init(recycle_only_initSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_treedepth(max_treedepthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_treedepth_init(max_treedepth_initSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_jitter(eps_jitterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type L_jitter(L_jitterSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< const double >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< const double >::type l_eps_init(l_eps_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type different_stepsize(different_stepsizeSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::RObject >::type M_cont(M_contSEXP);
    Rcpp::traits::input_parameter< const Rcpp::RObject >::type M_disc(M_discSEXP);
    rcpp_result_gen = Rcpp::wrap(set_parameters(N_init1, N_adapt, N_init2, burn_adapt_ratio, keep_warm_up, recycle_only_init, max_treedepth, max_treedepth_init, eps_jitter, L_jitter, gamma, kappa, delta, t0, M_type, refresh, l_eps_init, different_stepsize, mu, M_cont, M_disc));
    return rcpp_result_gen;
END_RCPP
}
// main_function
Rcpp::List main_function(const arma::vec& theta0, const Rcpp::Function& nlp, const Rcpp::List& args, const unsigned int k, const unsigned int N, unsigned int K, double tau, unsigned int L, int thin, const unsigned int& chain_id, const bool verbose, const Rcpp::List& control);
RcppExport SEXP _XDNUTS_main_function(SEXP theta0SEXP, SEXP nlpSEXP, SEXP argsSEXP, SEXP kSEXP, SEXP NSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP LSEXP, SEXP thinSEXP, SEXP chain_idSEXP, SEXP verboseSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type nlp(nlpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type chain_id(chain_idSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(main_function(theta0, nlp, args, k, N, K, tau, L, thin, chain_id, verbose, control));
    return rcpp_result_gen;
END_RCPP
}
// trajectories
Rcpp::DataFrame trajectories(const Rcpp::NumericVector& theta0, const arma::vec& m0, const Rcpp::Function& nlp, const Rcpp::List& args, const double& eps, const unsigned int& k, const Rcpp::RObject& M_cont, const Rcpp::RObject& M_disc, const unsigned int& max_it);
RcppExport SEXP _XDNUTS_trajectories(SEXP theta0SEXP, SEXP m0SEXP, SEXP nlpSEXP, SEXP argsSEXP, SEXP epsSEXP, SEXP kSEXP, SEXP M_contSEXP, SEXP M_discSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type nlp(nlpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type M_cont(M_contSEXP);
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type M_disc(M_discSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(trajectories(theta0, m0, nlp, args, eps, k, M_cont, M_disc, max_it));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XDNUTS_set_parameters", (DL_FUNC) &_XDNUTS_set_parameters, 21},
    {"_XDNUTS_main_function", (DL_FUNC) &_XDNUTS_main_function, 12},
    {"_XDNUTS_trajectories", (DL_FUNC) &_XDNUTS_trajectories, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_XDNUTS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
